#include <iostream>
using namespace std;

/*
! 菱形继承概念：
  * 两个派生类继承同一个基类
  * 又有某个类同时继承者两个派生类
  * 这种继承被称为菱形继承，或者钻石继承
* 菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义
* 利用虚继承可以解决菱形继承问题
 */

class Animal
{
public:
  int m_Age;
};

// ! 继承前加virtual关键字后，变为虚继承
// ! 此时公共的父类Animal称为虚基类
class Sheep : virtual public Animal
{
};
class Tuo : virtual public Animal
{
};
class SheepTuo : public Sheep, public Tuo
{
};

void test01()
{
  SheepTuo st;
  st.Sheep::m_Age = 100;
  st.Tuo::m_Age = 200;

  // todo 当菱形继承时，两个父类拥有相同数据，需要加以作用域区分
  cout << "st.Sheep::m_Age = " << st.Sheep::m_Age << endl;
  cout << "st.Tuo::m_Age = " << st.Tuo::m_Age << endl;
  cout << "st.m_Age = " << st.m_Age << endl; // todo 虚继承后，子类继承的属性只有一个，可以不用作用域区分
  // ! 虚继承其实是在子类中添加一个指针，指向虚基类，通过指针访问虚基类的数据
}

int main()
{

  test01();

  system("pause");

  return 0;
}